#!/usr/bin/env node
//-*- mode:js -*-

(function() {
  require("./runtime/lisp.js");

  // Run codes.
  var runCodes = function(codes, compile) {
    var reader = new LISP.Reader(codes);
    try {
      var s;
      var result;
      for (;;) {
        s = reader.read();
        if (!s)
          return result;

        if (compile) {
          result = LISP.compile(s);
          LISP.print(result + ';');
        } else {
          result = LISP.eval(s);
        }
      }
    } catch (e) {
      if (e instanceof LISP.NoCloseParenException)
        return e;  // Continue input.
      console.error(e);
      return e;
    }
  };

  // Read-Eval-Print loop.
  var repl = function() {
    process.stdin.resume();
    process.stdin.setEncoding('utf8');

    var tty = require('tty');
    var isatty = tty.isatty(0);  // Whether the stdin is a tty.
    var prompt1 = '> ';
    var prompt2 = '| ';
    var inputs = [];

    if (isatty)
      process.stdout.write(prompt1);
    process.stdin.on('data', function (chunk) {
      inputs.push(chunk);
      var result = runCodes(inputs.join(''), compileOnly);
      if (result instanceof LISP.NoCloseParenException) {
        // In REPL, if NoCloseParenException occurs,
        // a user keep typing so inputs should be kept.
        if (isatty) {
          process.stdout.write(prompt2);
        }
      } else {
        // Otherwise should be consumed.
        inputs = [];
        if (isatty) {
          console.log(LISP.makeString(result, 10));
          process.stdout.write(prompt1);
        }
      }
    });
    process.stdin.on('end', function () {
      if (inputs.length > 0) {
        console.error('Input not terminated: [' + inputs + ']');
        process.exit(1);
        return;
      }
      process.exit(0);
    });
  };

  // Run script.
  var fs = require('fs');
  var runArgv = function(index) {
    if (index >= process.argv.length) {
      process.exit(0);
      return;
    }
    var fileName = process.argv[index];
    if (fileName === '-c') {
      compileOnly = true;
      return runArgv(index + 1);
    }
    fs.readFile(fileName, 'utf-8', function(error, text) {
      if (error) {
        console.error('File open error [' + fileName + ']: ' + error);
        process.exit(1);
      }

      if (runCodes(text, compileOnly) !== true)
        process.exit(1);
      runArgv(index + 1);
    });
  };


  // Main.
  var translator = "./lisp2js.js";
  var index = 2;
  var compileOnly = false;
  for (; index < process.argv.length; ++index) {
    var option = process.argv[index];
    if (option == '-c') {
      compileOnly = true;
      continue;
    }
    if (option == '-t') {
      translator = process.argv[++index];
      continue;
    }
    break;
  }

  require(translator);

  if (index >= process.argv.length) {  // No input file name: read from stdin.
    return repl();
  } else {  // Process command line argument files.
    return runArgv(index);
  }
})();
